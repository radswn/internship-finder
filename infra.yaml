AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CodeBucketName:
    Type: String
    Description: The name of the bucket with Lambdas' code
  CheckerLambdaCodeVersion:
    Type: String
    Description: Version of code used in the checker lambda
  CheckerLambdaZip:
    Type: String
    Description: Name of .zip with checker lambda code
  NotifierLambdaCodeVersion:
    Type: String
    Description: Version of code used in the notifier lambda
  NotifierLambdaZip:
    Type: String
    Description: Name of .zip with notifier lambda code
  BotToken:
    Type: String
    Description: API Token of the Telegram bot
  ChatID:
    Type: String
    Description: ID of the user's (mine) chat

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  CheckerSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CheckerLambda.Arn
      Principal: events.amazonaws.com
  NotifierSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NotifierLambda.Arn
      Principal: events.amazonaws.com

  CheckerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda for retrieving internships from companies' career sites and sending them to SQS
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CheckerLambdaZip
        S3ObjectVersion: !Ref CheckerLambdaCodeVersion
      Environment:
        Variables:
          QueueName: !GetAtt EventQueue.QueueName
      Handler: checker
      Timeout: 10
      Runtime: go1.x
      Role: !GetAtt LambdaRole.Arn
  NotifierLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Retrieving events from SQS and sending to the user through Telegram webhook
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref NotifierLambdaZip
        S3ObjectVersion: !Ref NotifierLambdaCodeVersion
      Environment:
        Variables:
          QueueName: !GetAtt EventQueue.QueueName
          BotToken: !Ref BotToken
          ChatID: !Ref ChatID
      Handler: notifier
      Timeout: 10
      Runtime: go1.x
      Role: !GetAtt LambdaRole.Arn

  EventQueue:
    Type: AWS::SQS::Queue

  CheckerScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to invoke the checker lambda everyday at 11PM
      ScheduleExpression: cron(0 22 ? * * *)
      Targets:
        - Id: checker
          Arn: !GetAtt CheckerLambda.Arn
          Input: |
            {
              "amazonSite": "https://www.amazon.jobs/en/search.json?category%5B%5D=software-development&category%5B%5D=machine-learning-science&is_intern%5B%5D=1&radius=24km&facets%5B%5D=normalized_country_code&facets%5B%5D=normalized_state_name&facets%5B%5D=normalized_city_name&facets%5B%5D=location&facets%5B%5D=business_category&facets%5B%5D=category&facets%5B%5D=schedule_type_id&facets%5B%5D=employee_class&facets%5B%5D=normalized_location&facets%5B%5D=job_function_id&facets%5B%5D=is_manager&facets%5B%5D=is_intern&offset=0&result_limit=100&sort=recent&latitude=&longitude=&loc_group_id=&loc_query=&base_query=&city=&country=&region=&county=&query_options=&business_category%5B%5D=student-programs&category%5B%5D=software-development&category%5B%5D=machine-learning-science&",
              "appleSite": "https://jobs.apple.com/en-us/search?team=internships-STDNT-INTRN",
              "date": ""
            }
  NotifierScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to invoke the notifier lambda every Wednesday and Sunday at 9AM
      ScheduleExpression: cron(0 8 ? * SUN,WED *)
      Targets:
        - Id: notifier
          Arn: !GetAtt NotifierLambda.Arn
          Input: |
            {}