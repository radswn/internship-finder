AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CodeBucketName:
    Type: String
    Description: The name of the bucket with Lambdas' code
  CheckerLambdaCodeVersion:
    Type: String
    Description: Version of code used in the checker lambda
  CheckerLambdaZip:
    Type: String
    Description: Name of .zip with checker lambda code
  NotifierLambdaCodeVersion:
    Type: String
    Description: Version of code used in the notifier lambda
  NotifierLambdaZip:
    Type: String
    Description: Name of .zip with notifier lambda code
  BotToken:
    Type: String
    Description: API Token of the Telegram bot
  ChatID:
    Type: String
    Description: ID of the user's (mine) chat

Resources:
  CheckerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
  NotifierLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  CheckerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda for checking internships on company career sites
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CheckerLambdaZip
        S3ObjectVersion: !Ref CheckerLambdaCodeVersion
      Environment:
        Variables:
          QueueName: !GetAtt EventQueue.QueueName
      Handler: checker
      Timeout: 10
      Runtime: go1.x
      Role: !GetAtt CheckerLambdaRole.Arn
  NotifierLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Retrieving events from SQS and sending to the user through Telegram webhook
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref NotifierLambdaZip
        S3ObjectVersion: !Ref NotifierLambdaCodeVersion
      Environment:
        Variables:
          QueueName: !GetAtt EventQueue.QueueName
          BotToken: !Ref BotToken
          ChatID: !Ref ChatID
      Handler: notifier
      Timeout: 10
      Runtime: go1.x
      Role: !GetAtt NotifierLambdaRole.Arn

  EventQueue:
    Type: AWS::SQS::Queue
